import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const isProduction = process.argv[2] === "production";

const buildConfig = {
  banner: {
    js: banner,
  },
  entryPoints: ["main.ts"],
  bundle: true,
  external: [
    "obsidian",
    "electron",
    "@codemirror/autocomplete",
    "@codemirror/collab",
    "@codemirror/commands",
    "@codemirror/language",
    "@codemirror/lint",
    "@codemirror/search",
    "@codemirror/state",
    "@codemirror/view",
    "@lezer/common",
    "@lezer/highlight",
    "@lezer/lr",
    ...builtins,
  ],
  format: "cjs",
  target: "es2018",
  platform: "node",
  minify: isProduction,
  sourcemap: isProduction ? false : "inline",
  treeShaking: true,
  charset: "utf8",
  legalComments: isProduction ? "none" : "inline",
  outfile: "main.js",
  define: {
    "process.env.NODE_ENV": isProduction ? "'production'" : "'development'",
  },
  logLevel: "warning",
  drop: isProduction ? ["console", "debugger"] : [],
};

(async () => {
  try {
    const context = await esbuild.context(buildConfig);

    if (isProduction) {
      const result = await context.rebuild();

      console.log(`Production build complete (${result.errors.length} errors)`);
      await context.dispose();
      process.exit(result.errors.length > 0 ? 1 : 0);
    } else {
      await context.watch();
      console.log("Watching for changes...");
    }
  } catch (error) {
    console.error("Build failed:", error);
    process.exit(1);
  }
})();

process.on("unhandledRejection", (reason) => {
  console.error("Unhandled rejection:", reason);
  process.exit(1);
});

process.on("uncaughtException", (error) => {
  console.error("Uncaught exception:", error);
  process.exit(1);
});
